<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Product Update Panel</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/css/bootstrap.min.css">

   <link rel="stylesheet" href="/assets/css/admin/productUpdate.css">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.7/dist/sweetalert2.min.css">
</head>

<body>

    <%- include('./layout/sidenav.ejs') %>

        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-8 col-md-10 col-sm-12">
                    <div class="product-update-container">
                        <h4 class="text-center mb-4">Update Product</h4>
                        <form class="updatePdt" action="/admin/products/<%= product._id %>?_method=PUT" method="POST"
                            enctype="multipart/form-data">

                            <div class="form-group">
                                <label for="productName" class="form-label">Product Name</label>
                                <input type="text" class="form-control" id="productName" name="productName"
                                    value="<%= product.name %>">
                                <div id="productNameError" class="text-danger" style="display:none;">Product Name is
                                    required.</div>
                            </div>


                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="productPrice" class="form-label">Price</label>
                                        <input type="number" class="form-control" id="productPrice" name="productPrice"
                                            value="<%= product.price %>">
                                        <div id="productPriceError" class="text-danger" style="display:none;">Price must
                                            be a positive number.</div>
                                    </div>
                                </div>

                            </div>

                            <!-- Description -->
                            <div class="form-group">
                                <label for="productDescription" class="form-label">Description</label>
                                <textarea class="form-control" id="productDescription" name="productDescription"
                                    rows="3"><%= product.description %></textarea>
                                <div id="productDescriptionError" class="text-danger" style="display:none;">Description
                                    is required.</div>
                            </div>

                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="productCategory" class="form-label">Category</label>
                                        <select class="form-control" id="productCategory" name="productCategory">
                                            <% categories.forEach(category=> { %>
                                                <option value="<%= category._id %>"
                                                    <%=category._id.equals(product.category._id) ? 'selected' : '' %> >
                                                    <%= category.name %>
                                                </option>
                                                <% }) %>
                                        </select>
                                        <div id="productCategoryError" class="text-danger" style="display:none;">
                                            Category is required.</div>
                                    </div>
                                </div>

                                <input type="hidden" id="colorSizeStockMap"
                                    value='<%= JSON.stringify(colorSizeStockMap) %>'>
                            </div>

                            <div class="container mt-5">
                                <h6 style="color: rgb(0, 0, 0);">Allowed Formats:  jpeg, png, jpg</h6>
                                <h6 style="color: rgb(0, 0, 0);">Maximum Size: 5MB</h6>
                                <form class="updatePdt" action="/admin/products/<%= product._id %>?_method=PUT" method="POST" enctype="multipart/form-data">
                                    <div class="row g-3">
                                        <% [1, 2, 3, 4].forEach(index => { %>
                                        <div class="col-6 col-md-4 col-lg-3">
                                            <div class="preview-container">
                                                <div class="image-preview" id="previewContainer<%= index %>">
                                                    <div class="thumbnail-container">
                                                        <% if (product && product.images && product.images[index - 1]) { %>
                                                        <img style="width: 100px;" src="<%= product.images[index - 1] %>" class="preview-image" id="previewImage<%= index %>" alt="Preview">
                                                        <% } else { %>
                                                        <img style="width: 100px;" src="" class="preview-image" id="previewImage<%= index %>" alt="Preview">
                                                        <% } %>
                                                    </div>
                                                    <div class="upload-placeholder">
                                                        <i class="fas fa-image"></i>
                                                        <div>Upload Image</div>
                                                        <small class="d-block">Click or drop</small>
                                                    </div>
                                                    <button class="remove-image" id="removeImage<%= index %>">&times;</button>
                                                </div>
                                                <div class="error-message" id="errorMessage<%= index %>"></div>
                                                <input type="file" class="d-none" name="productImages" id="fileInput<%= index %>" accept="image/*" >
                                            </div>
                                        </div>
                                        <% }) %>
                                    </div>
                            

                          
                            <div class="modal fade" id="cropperModal" tabindex="-1">
                            <div class="modal-dialog modal-lg">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Crop Image</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="img-container">
                                            <img id="cropperImage" src="" alt="Image to crop">
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                        <button type="button" class="btn btn-primary" id="cropButton">Crop & Save</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="variant-form bg-light p-4 rounded mb-4">
                            <div id="colorSizeSection" class="mb-3">
                                <label class="form-label fw-bold">Colors and Sizes</label>
                                <div class="variant-item">
                                    <div class="row mb-3">
                                        <div class="col-md-12">
                                            <input type="text" 
                                                   name="productColors[]" 
                                                   class="form-control color-input" 
                                                   placeholder="Color (e.g., Red)">
                                        </div>
                                    </div>
                                    <div class="size-grid">
                                        <div>
                                            <label class="form-label">S</label>
                                            <input type="number" class="form-control size-input" data-size="S" min="0">
                                        </div>
                                        <div>
                                            <label class="form-label">M</label>
                                            <input type="number" class="form-control size-input" data-size="M" min="0">
                                        </div>
                                        <div>
                                            <label class="form-label">L</label>
                                            <input type="number" class="form-control size-input" data-size="L" min="0">
                                        </div>
                                        <div>
                                            <label class="form-label">X</label>
                                            <input type="number" class="form-control size-input" data-size="X" min="0">
                                        </div>
                                        <div>
                                            <label class="form-label">XL</label>
                                            <input type="number" class="form-control size-input" data-size="XL" min="0">
                                        </div>
                                        <div>
                                            <label class="form-label">XXL</label>
                                            <input type="number" class="form-control size-input" data-size="XXL" min="0">
                                        </div>
                                    </div>
                                    <input type="hidden" name="productSizes[]" class="size-string-input">
                                    <div class="mt-3">
                                        <button type="button" class="btn btn-danger remove-color-size">Remove</button>
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="btn btn-primary" id="addColorSize">
                                Add More Color & Sizes
                            </button>
                            <p id="color-size-error" class="text-danger mt-2 small"></p>
                        </div>



                            <div class="text-center mt-4">
                                <button type="submit" class="btn btn-primary w-50">Update Product</button>
                            </div>


                        </form>
                    </div>
                </div>
            </div>
        </div>






    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.7/dist/sweetalert2.all.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        <script>
           document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('.updatePdt');
    const existingImages = [];
    
   
    [1, 2, 3, 4].forEach(index => {
        const img = document.querySelector(`#previewImage${index}`);
        if (img && img.src) {
            existingImages[index - 1] = img.src;
        }
    });

   
    const validators = {
        isEmpty: value => !value.trim(),
        isInvalidPrice: value => isNaN(parseFloat(value)) || parseFloat(value) <= 0,
        isInvalidImage: file => {
            if (!file) return false;
            const fileType = file.type.split('/')[0];
            const maxFileSize = 5 * 1024 * 1024; 
            return fileType !== 'image' || file.size > maxFileSize;
        }
    };


    const showError = (elementId) => {
        const errorElement = document.getElementById(elementId);
        if (errorElement) {
            errorElement.style.display = 'block';
        }
    };

   
    const hideAllErrors = () => {
        document.querySelectorAll('.text-danger').forEach(el => {
            el.style.display = 'none';
        });
    };

  
    [1, 2, 3, 4].forEach(index => {
        const removeBtn = document.querySelector(`#removeImage${index}`);
        const previewImg = document.querySelector(`#previewImage${index}`);
        const fileInput = document.querySelector(`#fileInput${index}`);

        if (removeBtn && previewImg && fileInput) {
            removeBtn.addEventListener('click', (e) => {
                e.preventDefault();
                previewImg.src = '';
                fileInput.value = '';
                existingImages[index - 1] = null;

              
                const removedInput = document.createElement('input');
                removedInput.type = 'hidden';
                removedInput.name = 'removedImages';
                removedInput.value = index - 1;
                form.appendChild(removedInput);
            });

      
            fileInput.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    if (validators.isInvalidImage(file)) {
                        showError(`imageError${index}`);
                        fileInput.value = '';
                        return;
                    }

                    const reader = new FileReader();
                    reader.onload = function(e) {
                        previewImg.src = e.target.result;
                        existingImages[index - 1] = null;
                    };
                    reader.readAsDataURL(file);
                }
            });
        }
    });

    form.addEventListener('submit', function(event) {
        event.preventDefault();
        hideAllErrors();
        
        let isValid = true;
        const validationFields = [
            {
                id: 'productName',
                errorId: 'productNameError',
                validator: validators.isEmpty
            },
            {
                id: 'productPrice',
                errorId: 'productPriceError',
                validator: validators.isInvalidPrice
            },
            {
                id: 'productDescription',
                errorId: 'productDescriptionError',
                validator: validators.isEmpty
            },
            {
                id: 'productCategory',
                errorId: 'productCategoryError',
                validator: validators.isEmpty
            }
        ];

     
        validationFields.forEach(field => {
            const element = document.getElementById(field.id);
            if (element && field.validator(element.value)) {
                showError(field.errorId);
                isValid = false;
            }
        });

 
        const imageInputs = document.querySelectorAll('input[type="file"][name="productImages"]');
        imageInputs.forEach((input, index) => {
            if (input.files.length > 0) {
                const file = input.files[0];
                if (validators.isInvalidImage(file)) {
                    showError(`imageError${index}`);
                    isValid = false;
                }
            }
        });

        if (isValid) {
       
            existingImages.forEach((imgUrl, index) => {
                if (imgUrl) {
                    const hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'existingImages';
                    hiddenInput.value = imgUrl;
                    form.appendChild(hiddenInput);
                }
            });

            form.submit();
        } else {
            Swal.fire({
                title: 'Error!',
                text: 'There are errors in the form. Please fix them and try again.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    });
});


            async function handleFormSubmit(event) {
                event.preventDefault();


                const productData = {
                    name: document.getElementById('productName').value,
                    price: document.getElementById('productPrice').value,

                };

                const productId = 'the-product-id';

                await updateProduct(productId, productData);
            }

            var colorSizeStockMap = JSON.parse(document.getElementById("colorSizeStockMap").value);

         

            const productData = {
                colors: Object.entries(colorSizeStockMap).map(([color, sizes]) => ({
                    color: color,
                    sizes: Object.entries(sizes)
                        .filter(([_, quantity]) => quantity > 0)
                        .map(([size, quantity]) => `${size}:${quantity}`)
                        .join(', ')
                }))
            };

         



            function addColorSizeVariant(color = '', sizes = {}) {
    try {
   
        const templateElement = document.querySelector('.variant-item');
        if (!templateElement) {
            console.error('Variant template not found');
            return;
        }


        const template = templateElement.cloneNode(true);
        template.style.display = "block";

        const colorInput = template.querySelector('.color-input');
        if (colorInput) {
            colorInput.value = color;
        }


        const sizeInputs = template.querySelectorAll('.size-input');
        if (sizeInputs.length > 0) {
            sizeInputs.forEach(input => {
                const size = input.getAttribute('data-size');
                if (size) {
                    input.value = sizes[size] || '';
                }
            });
        }

        const container = document.getElementById('colorSizeSection');
        if (!container) {
            console.error('Container element not found');
            return;
        }


        container.appendChild(template);

    } catch (error) {
        console.error('Error adding variant:', error);
    }
}



  
    for (const [color, sizes] of Object.entries(colorSizeStockMap)) {
        addColorSizeVariant(color, sizes);
    }


    document.querySelector('.variant-item').remove();


    document.getElementById("addColorSize").addEventListener("click", function () {
        addColorSizeVariant("", {});
    });

    document.getElementById("colorSizeSection").addEventListener("click", function (event) {
        if (event.target.classList.contains("remove-color-size")) {
            event.target.closest(".variant-item").remove();
        }
    });





            function updateSizeString(variantItem) {
            const sizeInputs = variantItem.querySelectorAll('.size-input');
            const sizeStringInput = variantItem.querySelector('.size-string-input');
            
            let sizes = [];
            sizeInputs.forEach(input => {
                if (input.value && parseInt(input.value) > 0) {
                    sizes.push(`${input.dataset.size}:${input.value}`);
                }
            });
            
            sizeStringInput.value = sizes.join(',');
        }

      
        document.getElementById('addColorSize').addEventListener('click', function() {
            const colorSizeSection = document.querySelector('.variant-item');
            const newRow = colorSizeSection.cloneNode(true);
          
            newRow.querySelectorAll('input').forEach(input => {
                input.value = '';
            });

          
            newRow.querySelectorAll('.size-input').forEach(input => {
                input.addEventListener('input', () => updateSizeString(newRow));
            });

       
            newRow.querySelector('.remove-color-size').addEventListener('click', function() {
                if (document.querySelectorAll('.variant-item').length > 1) {
                    newRow.remove();
                }
            });

            document.getElementById('colorSizeSection').appendChild(newRow);
        });

      
        document.querySelectorAll('.variant-item').forEach(variantItem => {
           
            variantItem.querySelectorAll('.size-input').forEach(input => {
                input.addEventListener('input', () => updateSizeString(variantItem));
            });

            
            variantItem.querySelector('.remove-color-size').addEventListener('click', function() {
                if (document.querySelectorAll('.variant-item').length > 1) {
                    variantItem.remove();
                }
            });
        });

    

           


            document.addEventListener('DOMContentLoaded', function () {
    const previewContainers = document.querySelectorAll('.preview-container');
    const cropperModal = new bootstrap.Modal(document.getElementById('cropperModal'));
    const cropperImage = document.getElementById('cropperImage');
    const cropButton = document.getElementById('cropButton');
    let cropper;
    let croppedImages = {}; 
    let existingImages = {}; 
    let currentIndex;

 
    previewContainers.forEach((container, index) => {
        const previewImage = container.querySelector(`#previewImage${index + 1}`);
        if (previewImage.src && !previewImage.src.includes("transparent")) {
            existingImages[index + 1] = previewImage.src;
        }
    });

    previewContainers.forEach((container, index) => {
        const fileInput = container.querySelector(`#fileInput${index + 1}`);
        const previewImage = container.querySelector(`#previewImage${index + 1}`);
        const removeButton = container.querySelector(`#removeImage${index + 1}`);

        container.addEventListener('click', (event) => {
            if (!event.target.classList.contains('remove-image')) {
                fileInput.click();
            }
        });

        fileInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = () => {
                    cropperImage.src = reader.result;
                    currentIndex = index + 1; 
                    cropperModal.show();
                    if (cropper) {
                        cropper.destroy();
                    }
                    cropper = new Cropper(cropperImage, {
                        aspectRatio: 1,
                        viewMode: 1,
                    });
                };
                reader.readAsDataURL(file);
            }
        });

        cropButton.addEventListener('click', () => {
            const canvas = cropper.getCroppedCanvas({
                width: 100, 
                height: 100, 
            });
            const previewImage = document.querySelector(`#previewImage${currentIndex}`);
            previewImage.src = canvas.toDataURL('image/jpeg');
            croppedImages[currentIndex] = canvas.toDataURL('image/jpeg');
            delete existingImages[currentIndex]; 
            cropperModal.hide();
            console.log(`Cropped image ${currentIndex} saved.`);
        });

        removeButton.addEventListener('click', (event) => {
            event.stopPropagation();
            previewImage.src = '';
            fileInput.value = '';
            delete croppedImages[index + 1];
            delete existingImages[index + 1];
            console.log(`Removed image ${index + 1}.`);
        });
    });

    document.querySelector('.updatePdt').addEventListener('submit', (event) => {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);

       
        Object.keys(croppedImages).forEach((index) => {
    formData.delete(`fileInput${index}`); 
    formData.append(`fileInput${index}`, dataURLtoBlob(croppedImages[index]), `croppedImage${index}.jpg`);
});

  
Object.keys(existingImages).forEach((index) => {
        const imageUrl = existingImages[index].split('/').pop(); 
        formData.append('existingImages[]', imageUrl);
    });

 
    for (let pair of formData.entries()) {
        console.log(`${pair[0]}: ${pair[1]}`);
    }

     
        fetch(form.action, {
            method: 'POST',
            body: formData,
        })
        .then(response => response.json())
        .then(data => {
            console.log('Form submitted successfully:', data);
        })
        .catch(error => {
            console.error('Error submitting form:', error);
        });
    });

    function dataURLtoBlob(dataUrl) {
        const byteString = atob(dataUrl.split(',')[1]);
        const mimeString = dataUrl.split(',')[0].split(':')[1].split(';')[0];
        const ab = new ArrayBuffer(byteString.length);
        const ia = new Uint8Array(ab);
        for (let i = 0; i < byteString.length; i++) {
            ia[i] = byteString.charCodeAt(i);
        }
        return new Blob([ab], { type: mimeString });
    }
});






document.addEventListener('DOMContentLoaded', function () {
    const form = document.querySelector('.updatePdt');
    const removedImageIndexes = new Set();


    const handleImageRemoval = (button, index) => {
        const previewContainer = button.closest('.preview-container');
        if (!previewContainer) return;

        const previewImage = previewContainer.querySelector('.preview-image');
        const fileInput = previewContainer.querySelector('input[type="file"]');
        const uploadPlaceholder = previewContainer.querySelector('.upload-placeholder');

        if (previewImage) {
            const originalImageUrl = previewImage.getAttribute('data-original-url');
            if (originalImageUrl) {
                removedImageIndexes.add(index);

                let removedInput = form.querySelector(`input[name="removedImages"][value="${index}"]`);
                if (!removedInput) {
                    removedInput = document.createElement('input');
                    removedInput.type = 'hidden';
                    removedInput.name = 'removedImages';
                    removedInput.value = index;
                    form.appendChild(removedInput);
                }
            }

            previewImage.src = '';
            previewImage.style.display = 'none';
        }

        if (fileInput) {
            fileInput.value = '';
        }

        if (uploadPlaceholder) {
            uploadPlaceholder.style.display = 'flex';
        }

        button.style.display = 'none';
    };


    const initializeImageHandling = () => {
        const previewContainers = document.querySelectorAll('.preview-container');
        
        previewContainers.forEach((container, index) => {
            const previewImage = container.querySelector('.preview-image');
            const fileInput = container.querySelector('input[type="file"]');
            const removeButton = container.querySelector('.remove-image');
            const uploadPlaceholder = container.querySelector('.upload-placeholder');

            if (previewImage && previewImage.src) {
                previewImage.setAttribute('data-original-url', previewImage.src);
                removeButton.style.display = 'block';
                uploadPlaceholder.style.display = 'none';
            }

            fileInput.addEventListener('change', (event) => {
                const file = event.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        previewImage.src = e.target.result;
                        previewImage.style.display = 'block';
                        removeButton.style.display = 'block';
                        uploadPlaceholder.style.display = 'none';
                    };
                    reader.readAsDataURL(file);
                }
            });

            removeButton.addEventListener('click', (event) => {
                event.preventDefault();
                handleImageRemoval(removeButton, index);
            });

            container.addEventListener('click', (event) => {
                if (!event.target.closest('.remove-image')) {
                   
                }
            });
        });
    };

    initializeImageHandling();

 
    form.addEventListener('submit', function () {
        form.querySelector('input[name="removedImages"]').value = Array.from(removedImageIndexes).join(',');
    });
});


        </script>
</body>

</html>