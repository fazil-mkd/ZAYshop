<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Product Update Panel</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/css/bootstrap.min.css">



    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.7/dist/sweetalert2.min.css">
</head>

<body>

    <%- include('./layout/sidenav.ejs') %>

        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-8 col-md-10 col-sm-12">
                    <div class="product-update-container">
                        <h4 class="text-center mb-4">Update Product</h4>
                        <form class="updatePdt" action="/admin/products/<%= product._id %>?_method=PUT" method="POST"
                            enctype="multipart/form-data">

                            <div class="form-group">
                                <label for="productName" class="form-label">Product Name</label>
                                <input type="text" class="form-control" id="productName" name="productName"
                                    value="<%= product.name %>">
                                <div id="productNameError" class="text-danger" style="display:none;">Product Name is
                                    required.</div>
                            </div>


                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="productPrice" class="form-label">Price</label>
                                        <input type="number" class="form-control" id="productPrice" name="productPrice"
                                            value="<%= product.price %>">
                                        <div id="productPriceError" class="text-danger" style="display:none;">Price must
                                            be a positive number.</div>
                                    </div>
                                </div>

                            </div>

                            <!-- Description -->
                            <div class="form-group">
                                <label for="productDescription" class="form-label">Description</label>
                                <textarea class="form-control" id="productDescription" name="productDescription"
                                    rows="3"><%= product.description %></textarea>
                                <div id="productDescriptionError" class="text-danger" style="display:none;">Description
                                    is required.</div>
                            </div>

                            <!-- Category and Stock -->
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="productCategory" class="form-label">Category</label>
                                        <select class="form-control" id="productCategory" name="productCategory">
                                            <% categories.forEach(category=> { %>
                                                <option value="<%= category._id %>"
                                                    <%=category._id.equals(product.category._id) ? 'selected' : '' %> >
                                                    <%= category.name %>
                                                </option>
                                                <% }) %>
                                        </select>
                                        <div id="productCategoryError" class="text-danger" style="display:none;">
                                            Category is required.</div>
                                    </div>
                                </div>

                                <input type="hidden" id="colorSizeStockMap"
                                    value='<%= JSON.stringify(colorSizeStockMap) %>'>
                            </div>

                            <div class="container mt-5">
                                <form class="updatePdt" action="/admin/products/<%= product._id %>?_method=PUT" method="POST" enctype="multipart/form-data">
                                    <div class="row g-3">
                                        <% [1, 2, 3, 4].forEach(index => { %>
                                        <div class="col-6 col-md-4 col-lg-3">
                                            <div class="preview-container">
                                                <div class="image-preview" id="previewContainer<%= index %>">
                                                    <div class="thumbnail-container">
                                                        <% if (product && product.images && product.images[index - 1]) { %>
                                                        <img style="width: 100px;" src="<%= product.images[index - 1] %>" class="preview-image" id="previewImage<%= index %>" alt="Preview">
                                                        <% } else { %>
                                                        <img style="width: 100px;" src="" class="preview-image" id="previewImage<%= index %>" alt="Preview">
                                                        <% } %>
                                                    </div>
                                                    <div class="upload-placeholder">
                                                        <i class="fas fa-image"></i>
                                                        <div>Upload Image</div>
                                                        <small class="d-block">Click or drop</small>
                                                    </div>
                                                    <button class="remove-image" id="removeImage<%= index %>">&times;</button>
                                                </div>
                                                <div class="error-message" id="errorMessage<%= index %>"></div>
                                                <input type="file" class="d-none" name="productImages" id="fileInput<%= index %>" accept="image/*">
                                            </div>
                                        </div>
                                        <% }) %>
                                    </div>
                            
                            <!-- Cropper Modal -->
                          
                            <div class="modal fade" id="cropperModal" tabindex="-1">
                            <div class="modal-dialog modal-lg">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Crop Image</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="img-container">
                                            <img id="cropperImage" src="" alt="Image to crop">
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                        <button type="button" class="btn btn-primary" id="cropButton">Crop & Save</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                            <div id="colorSizeSection" class="mb-3">
                                <label class="form-label">Colors and Sizes</label>
                                <div class="row g-3 align-items-center">
                                    <div class="col-md-3">
                                        <input type="text" name="productColors[]" class="form-control color-input"
                                            placeholder="Color (e.g., Red)">
                                    </div>
                                    <div class="col-md-7 ">
                                        <input  type="text" name="productSizes[]" class="form-control sizes-input"
                                            placeholder="Sizes and Quantities (e.g., M:5, XL:10)">
                                    </div>
                                    <div class="col-md-2">
                                        <button type="button" class="btn btn-danger remove-color-size">Remove</button>
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="btn btn-primary" id="addColorSize">Add More Color &
                                Sizes</button>



                            <div class="text-center mt-4">
                                <button type="submit" class="btn btn-primary w-50">Update Product</button>
                            </div>


                        </form>
                    </div>
                </div>
            </div>
        </div>




        <!-- SweetAlert2 JS -->


    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.7/dist/sweetalert2.all.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        <script>
            const form = document.querySelector('.updatePdt');
            form.addEventListener('submit', function (event) {
                event.preventDefault();

                const errorElements = document.querySelectorAll('.text-danger');
                errorElements.forEach(el => el.style.display = 'none');

                let isValid = true;


                const productName = document.getElementById('productName').value.trim();
                if (!productName) {
                    document.getElementById('productNameError').style.display = 'block';
                    isValid = false;
                }


                const productPrice = parseFloat(document.getElementById('productPrice').value);
                if (isNaN(productPrice) || productPrice <= 0) {
                    document.getElementById('productPriceError').style.display = 'block';
                    isValid = false;
                }




                const productDescription = document.getElementById('productDescription').value.trim();
                if (!productDescription) {
                    document.getElementById('productDescriptionError').style.display = 'block';
                    isValid = false;
                }

                const productCategory = document.getElementById('productCategory').value.trim();
                if (!productCategory) {
                    document.getElementById('productCategoryError').style.display = 'block';
                    isValid = false;
                }



                const images = document.querySelectorAll('input[type="file"][name="productImages[]"]');
                images.forEach((imageInput, index) => {
                    if (imageInput.files.length > 0) {
                        const file = imageInput.files[0];
                        const fileType = file.type.split('/')[0];
                        const maxFileSize = 5 * 1024 * 1024;
                        if (fileType !== 'image') {
                            document.getElementById(`imageError${index}`).style.display = 'block';
                            isValid = false;
                        } else if (file.size > maxFileSize) {
                            document.getElementById(`imageSizeError${index}`).style.display = 'block';
                            isValid = false;
                        }
                    }
                });

                if (isValid) {
                    form.submit();
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: 'There are errors in the form. Please fix them and try again.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            });




            async function handleFormSubmit(event) {
                event.preventDefault();


                const productData = {
                    name: document.getElementById('productName').value,
                    price: document.getElementById('productPrice').value,

                };

                const productId = 'the-product-id';

                await updateProduct(productId, productData);
            }

            var colorSizeStockMap = JSON.parse(document.getElementById("colorSizeStockMap").value);

         

            const productData = {
                colors: Object.entries(colorSizeStockMap).map(([color, sizes]) => ({
                    color: color,
                    sizes: Object.entries(sizes)
                        .filter(([_, quantity]) => quantity > 0)
                        .map(([size, quantity]) => `${size}:${quantity}`)
                        .join(', ')
                }))
            };

         


            function displayColorSizes(data) {
                const colorSizeSection = document.getElementById('colorSizeSection');

                data.colors.forEach((item, index) => {
                    if (index === 0) {
                        const firstRow = colorSizeSection.querySelector('.row');
                        firstRow.querySelector('.color-input').value = item.color;
                        firstRow.querySelector('.sizes-input').value = item.sizes.trim();
                    } else {

                        const firstRow = colorSizeSection.querySelector('.row');
                        const newRow = firstRow.cloneNode(true);
                        newRow.querySelector('.color-input').value = item.color;
                        newRow.querySelector('.sizes-input').value = item.sizes.trim();

                        newRow.querySelector('.remove-color-size').addEventListener('click', function () {
                            this.closest('.row').remove();
                        });

                        colorSizeSection.appendChild(newRow);
                    }
                });
            }




            document.getElementById('addColorSize').addEventListener('click', function () {
                const colorSizeSection = document.getElementById('colorSizeSection');
                const firstRow = colorSizeSection.querySelector('.row');
                const newRow = firstRow.cloneNode(true);


                newRow.querySelectorAll('input').forEach(input => {
                    input.value = '';
                });

                newRow.querySelector('.remove-color-size').addEventListener('click', function () {
                    this.closest('.row').remove();
                });

                colorSizeSection.appendChild(newRow);
            });


            document.querySelectorAll('.remove-color-size').forEach(button => {
                button.addEventListener('click', function () {
                    this.closest('.row').remove();
                });
            });


            displayColorSizes(productData);


            document.addEventListener('DOMContentLoaded', function () {
    const previewContainers = document.querySelectorAll('.preview-container');
    const cropperModal = new bootstrap.Modal(document.getElementById('cropperModal'));
    const cropperImage = document.getElementById('cropperImage');
    const cropButton = document.getElementById('cropButton');
    let cropper;
    let croppedImages = {}; 
    let existingImages = {}; 
    let currentIndex;

 
    previewContainers.forEach((container, index) => {
        const previewImage = container.querySelector(`#previewImage${index + 1}`);
        if (previewImage.src && !previewImage.src.includes("transparent")) {
            existingImages[index + 1] = previewImage.src;
        }
    });

    previewContainers.forEach((container, index) => {
        const fileInput = container.querySelector(`#fileInput${index + 1}`);
        const previewImage = container.querySelector(`#previewImage${index + 1}`);
        const removeButton = container.querySelector(`#removeImage${index + 1}`);

        container.addEventListener('click', (event) => {
            if (!event.target.classList.contains('remove-image')) {
                fileInput.click();
            }
        });

        fileInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = () => {
                    cropperImage.src = reader.result;
                    currentIndex = index + 1; 
                    cropperModal.show();
                    if (cropper) {
                        cropper.destroy();
                    }
                    cropper = new Cropper(cropperImage, {
                        aspectRatio: 1,
                        viewMode: 1,
                    });
                };
                reader.readAsDataURL(file);
            }
        });

        cropButton.addEventListener('click', () => {
            const canvas = cropper.getCroppedCanvas({
                width: 100, 
                height: 100, 
            });
            const previewImage = document.querySelector(`#previewImage${currentIndex}`);
            previewImage.src = canvas.toDataURL('image/jpeg');
            croppedImages[currentIndex] = canvas.toDataURL('image/jpeg');
            delete existingImages[currentIndex]; 
            cropperModal.hide();
            console.log(`Cropped image ${currentIndex} saved.`);
        });

        removeButton.addEventListener('click', (event) => {
            event.stopPropagation();
            previewImage.src = '';
            fileInput.value = '';
            delete croppedImages[index + 1];
            delete existingImages[index + 1];
            console.log(`Removed image ${index + 1}.`);
        });
    });

    document.querySelector('.updatePdt').addEventListener('submit', (event) => {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);

       
        Object.keys(croppedImages).forEach((index) => {
            console.log(`Appending cropped image ${index}`);
            formData.append(`croppedImages[]`, dataURLtoBlob(croppedImages[index]), `croppedImage${index}.jpg`);
        });

     
        Object.keys(existingImages).forEach((index) => {
            console.log(`Appending existing image ${index}`);
            formData.append('existingImages[]', existingImages[index]);
        });

        for (let pair of formData.entries()) {
            console.log(`${pair[0]}: ${pair[1]}`);
        }

        fetch(form.action, {
            method: 'POST',
            body: formData,
        })
        .then(response => response.json())
        .then(data => {
            console.log('Form submitted successfully:', data);
        })
        .catch(error => {
            console.error('Error submitting form:', error);
        });
    });

    function dataURLtoBlob(dataUrl) {
        const byteString = atob(dataUrl.split(',')[1]);
        const mimeString = dataUrl.split(',')[0].split(':')[1].split(';')[0];
        const ab = new ArrayBuffer(byteString.length);
        const ia = new Uint8Array(ab);
        for (let i = 0; i < byteString.length; i++) {
            ia[i] = byteString.charCodeAt(i);
        }
        return new Blob([ab], { type: mimeString });
    }
});







document.addEventListener('DOMContentLoaded', function () {
    const removeButtons = document.querySelectorAll('.remove-image');

    removeButtons.forEach(button => {
        button.addEventListener('click', (event) => {
            event.preventDefault(); 
            const previewContainer = button.closest('.preview-container'); 
            if (previewContainer) {
                const previewImage = previewContainer.querySelector('.preview-image');
                const fileInput = previewContainer.querySelector('input[type="file"]');


                if (previewImage) {
                    previewImage.src = '';
                }
                if (fileInput) {
                    fileInput.value = '';
                }

            }
        });
    });
});

        </script>
</body>

</html>