<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coupon Management System</title>
    <link rel="stylesheet" href="/assets/css/admin/coupenMangement.css">
</head>
<body>
    <%- include('./layout/sidenav.ejs') %>
    <div class="container">
        <div class="header">
            <h1>Coupon Management System</h1>
        </div>

        <div class="add-coupon-form">
            <h2>Add New Coupon</h2>
            <form id="couponForm">
                <div class="form-group">
                    <label for="code">Coupon Code</label>
                    <input type="text" id="code" >
                    <div class="error-message" id="code-error"></div> 
                </div>
                <div class="form-group">
                    <label for="discount">Discount Amount (%)</label>
                    <input type="number" id="discount"  >
                    <div class="error-message" id="discount-error"></div>
                </div>
                <div class="form-group">
                    <label for="expiry">Expiry Date</label>
                    <input type="date" id="expiry" >
                    <div class="error-message" id="expiry-error"></div> 
                </div>
                <div class="form-group">
                    <label for="type">Coupon Type</label>
                    <select id="type">
                        <option value="percentage">Percentage Discount</option>     
                    </select>
                </div>
                <div class="form-group">
                    <label for="maxDiscount">Maximum Discount</label>
                    <input type="text" id="maxDiscount" >
                    <div class="error-message" id="maxDiscount-error"></div> 
                </div>
                <button type="submit" class="btn">Add Coupon</button>
            </form>
        </div>

        <div class="coupons-grid" id="couponsGrid">
        
        </div>
    </div>
   
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        
        document.getElementById('couponForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
    
    const fields = {
        code: { value: document.getElementById('code').value, pattern: /^[A-Za-z0-9]+$/, message: 'Coupon Code should contain only letters and numbers ' },
        discount: { value: document.getElementById('discount').value, pattern: /^\d{1,2}(\.\d{1,2})?$/, range: [0, 100], message: 'Discount Amount must be a valid number between 0 and 100.' },
        expiry: { value: document.getElementById('expiry').value, required: true, message: 'Please select an expiry date.' },
        maxDiscount: { value: document.getElementById('maxDiscount').value, pattern: /^\d+$/, message: 'Maximum Discount should be a positive integer.' },
        type: { value: document.getElementById('type').value, required: true, message: 'Please select a discount type.' }
    };

    let isValid = true;
    Object.keys(fields).forEach(id => {
        const field = fields[id];
        if ((field.required && !field.value) || (field.pattern && !field.value.match(field.pattern)) || (field.range && (field.value < field.range[0] || field.value > field.range[1]))) {
            document.getElementById(id + '-error').textContent = field.message;
            isValid = false;
        }
    });

    if (isValid) {
        const name = `Coupon for ${fields.code.value}`;
        try {
            const response = await fetch('/admin/coupon/add', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    code: fields.code.value,
                    discountAmount: fields.discount.value,
                    discountType: fields.type.value,
                    expireOn: fields.expiry.value,
                    name,
                    maxDiscount: fields.maxDiscount.value
                })
            });

            const result = await response.json();
            if (response.ok) {
                Swal.fire('Coupon added successfully!');
                loadCoupons();
                e.target.reset();
            } else {
                Swal.fire(`Error: ${result.message}`);
            }
        } catch (error) {
            Swal.fire('Error: Unable to connect to the server');
            console.error(error);
        }
    }
});



        
        async function loadCoupons() {
            const response = await fetch('/admin/coupon/view');
            const coupons = await response.json();

            const couponsGrid = document.getElementById('couponsGrid');
            couponsGrid.innerHTML = ''; 

            coupons.forEach(coupon => {
                const couponCard = document.createElement('div');
                couponCard.className = 'coupon-card';

                const isExpired = new Date(coupon.expireOn) < new Date();
                const statusClass = isExpired ? 'status-expired' : 'status-active';
                const statusText = isExpired ? 'Expired' : 'Active';

                couponCard.innerHTML = `
                    <div class="coupon-code">${coupon.code}</div>
                    <div class="coupon-details">
                        <p>Discount: ${coupon.discountType === 'percentage' ? coupon.discountAmount + '%' : '$' + coupon.discountAmount}</p>
                        <p>Expires: ${new Date(coupon.expireOn).toLocaleDateString()}</p>
                        <p>Type: ${coupon.discountType === 'percentage' ? 'Percentage Discount' : 'Fixed Amount'}</p>
                        <p>Status: <span class="${statusClass}">${statusText}</span></p>
                        <p>Users:${ coupon.userId.length}</p>
                    </div>
                  
                    <button class='update-btn'>Update</button>
                    <button class="delete-btn" data-id="${coupon._id}">Delete</button>

                `;


                couponCard.querySelector('.update-btn').addEventListener('click', function () {
                showUpdateForm(coupon);
            })


                couponsGrid.appendChild(couponCard);
            });
        }

     



        function showUpdateForm(coupon) {
    const today = new Date().toISOString().split('T')[0]; 

    const updateFormHTML = `
        <form id="updateForm" class="update-form">
            <h3>Update Coupon</h3>

            <label for="updateCode">Code:</label>
            <input type="text" id="updateCode" value="${coupon.code}" readonly />
            <span class="error-message text-danger" id="updateCode-error"></span>

            <label for="updateDiscount">Discount Value:</label>
            <input type="number" id="updateDiscount" value="${coupon.discountAmount}" />
            <span class="error-message text-danger" id="updateDiscount-error"></span>

            <label for="updateExpiry">Expiry Date:</label>
            <input type="date" id="updateExpiry" value="${coupon.expireOn.split('T')[0]}" min="${today}" />
            <span class="error-message text-danger" id="updateExpiry-error"></span>

            <label for="updateType">Discount Type:</label>
            <select id="updateType">
                <option value="percentage" ${coupon.discountType === 'percentage' ? 'selected' : ''}>Percentage</option> 
            </select>
            <span class="error-message text-danger" id="updateType-error"></span>

            <label for="updateMaxDiscount">Max Discount:</label>
            <input type="number" id="updateMaxDiscount" value="${coupon.maxDiscount || ''}" />
            <span class="error-message text-danger" id="updateMaxDiscount-error"></span>

            <button type="button" id="cancelUpdate">Cancel</button>
            <button type="submit">Update</button>
        </form>
    `;

    const updateFormContainer = document.createElement('div');
    updateFormContainer.id = 'updateFormContainer';
    updateFormContainer.innerHTML = updateFormHTML;
    document.body.appendChild(updateFormContainer);

    document.getElementById('cancelUpdate').addEventListener('click', function () {
        document.getElementById('updateFormContainer').remove();
    });

    document.getElementById('updateForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        document.querySelectorAll('.error-message').forEach(el => el.textContent = '');

        const updatedDiscount = document.getElementById('updateDiscount').value;
        const updatedExpiry = document.getElementById('updateExpiry').value;
        const updatedType = document.getElementById('updateType').value;
        const updatedMaxDiscount = document.getElementById('updateMaxDiscount').value;

        const fields = {
            updateDiscount: { 
                value: updatedDiscount, 
                pattern: /^\d{1,2}(\.\d{1,2})?$/, 
                range: [0, 100], 
                message: 'Discount Amount must be a valid number between 0 and 100.' 
            },
            updateExpiry: { 
                value: updatedExpiry, 
                required: true, 
                message: 'Please select an expiry date.' 
            },
            updateMaxDiscount: { 
                value: updatedMaxDiscount, 
                pattern: /^\d+$/, 
                message: 'Maximum Discount should be a positive integer.' 
            },
            updateType: { 
                value: updatedType, 
                required: true, 
                message: 'Please select a discount type.' 
            }
        };

        let isValid = true;

        Object.keys(fields).forEach(id => {
            const field = fields[id];
            if ((field.required && !field.value) || 
                (field.pattern && !field.value.match(field.pattern)) || 
                (field.range && (field.value < field.range[0] || field.value > field.range[1]))) {
                document.getElementById(id + '-error').textContent = field.message;
                isValid = false;
            }
        });

   
        if (new Date(updatedExpiry) < new Date(today)) {
            document.getElementById('updateExpiry-error').textContent = 'Expiry date cannot be in the past.';
            isValid = false;
        }

        if (!isValid) return;

        const response = await fetch(`/admin/coupons/${coupon._id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                discountAmount: updatedDiscount,
                expireOn: updatedExpiry,
                discountType: updatedType,
                maxDiscount: updatedMaxDiscount
            })
        });

        if (response.ok) {
            Swal.fire({
                title: 'Success!',
                text: 'Coupon updated successfully!',
                icon: 'success',
                confirmButtonText: 'OK'
            }).then(() => {
                location.reload()
                document.getElementById('updateFormContainer').remove();
               
            });
        } else {
            Swal.fire({
                title: 'Error!',
                text: 'Error updating coupon.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    });
}


        window.onload = loadCoupons;




        document.addEventListener("click", async function (event) {
    if (event.target.classList.contains("delete-btn")) {
        const couponId = event.target.getAttribute("data-id");

     
        const confirmDelete = await Swal.fire({
            title: "Are you sure?",
            text: "This action cannot be undone!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Yes, delete it!"
        });

        if (!confirmDelete.isConfirmed) return;

        try {
            const response = await fetch(`/admin/couponsDel/${couponId}`, {
                method: "DELETE",
                headers: { "Content-Type": "application/json" }
            });

            if (response.ok) {
                Swal.fire("Deleted!", "Coupon has been removed.", "success");
                event.target.closest(".coupon-card").remove(); 
            } else {
                Swal.fire("Error!", "Failed to delete the coupon.", "error");
            }
        } catch (error) {
            Swal.fire("Error!", "Something went wrong.", "error");
        }
    }
});


let today = new Date().toISOString().split("T")[0];


document.getElementById("expiry").setAttribute("min", today);


       
    </script>
</body>
</html>
