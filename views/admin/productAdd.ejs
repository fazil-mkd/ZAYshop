<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Product Management Panel</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Cropper.js CSS -->
    <link href="https://unpkg.com/cropperjs@1.5.12/dist/cropper.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/assets/css/admin/productAdd.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Cropper.js CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">

</head>
<body>
    <!---------------------------------------------------> 
    <%- include('./layout/sidenav.ejs') %> 
    <!--------------------------------------------------->

    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8 col-md-10">
                <% if (successMessage) { %>
                    <div class="alert alert-success"><%= successMessage %></div>
                <% } else { %>
                    <div class="alert alert-success hidden"></div>
                <% } %>
                
                <% if (errorMessage) { %>
                    <div class="alert alert-error"><%= errorMessage %></div>
                <% } else { %>
                    <div class="alert alert-error hidden"></div>
                <% } %>
                <div class="product-form-container">
                    <h2 class="text-center mb-4">Add New Product</h2>
                    <div id="errorMessages"></div>
                    <form id="productForm" action="/admin/products/add" method="POST" enctype="multipart/form-data">
                        <!-- Product Name and Price -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="productName" class="form-label">Product Name</label>
                                    <input type="text" class="form-control" id="productName" name="productName" minlength="3">
                                    <p id="name-error"></p>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="productPrice" class="form-label">Price</label>
                                    <input type="number" class="form-control" id="productPrice" name="productPrice" min="0" >
                                    <p id="price-error"></p>
                                </div>
                            </div>
                        </div>

                    
                      
                        <div class="container mt-5">
                            <div class="row g-3">
                                <h6 style="color: azure;">Allowed Formats:  jpeg, png, jpg</h6>
                                    <h6 style="color: azure;">Maximum Size: 5MB</h6>
                                <% [1, 2, 3, 4].forEach(index => { %>
                                <div class="col-6 col-md-4 col-lg-3">
                                    
                                    <div class="preview-container">
                                        <div class="image-preview" id="previewContainer<%= index %>">
                                            <div class="thumbnail-container">
                                                <img  class="preview-image" id="previewImage<%= index %>" alt="Preview">
                                            </div>
                                            <div class="upload-placeholder">
                                                <i class="fas fa-image"></i>
                                                <div>Upload Image</div>
                                                <small class="d-block">Click or drop</small>
                                            </div>
                                            <button class="remove-image" id="removeImage<%= index %>">&times;</button>
                                        </div>
                                        <div class="error-message" id="errorMessage<%= index %>"></div>
                                        <input type="file" class="d-none" name="productImages" id="fileInput<%= index %>" accept="image/*" >
                                        <div class="error-message" id="imageError1"></div>
                                    </div>
                                </div>
                                <% }) %>
                            </div>
                        </div>
                        <p id="image-error"></p>
                        <div class="modal fade" id="cropperModal" tabindex="-1">
                            <div class="modal-dialog modal-lg">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Crop Image</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="img-container">
                                            <img id="cropperImage" src="" alt="Image to crop">
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                        <button type="button" class="btn btn-primary" id="cropButton">Crop & Save</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Product Description -->
                        <div class="form-group">
                            <label for="productDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="productDescription" name="productDescription" rows="4"></textarea>
                        </div>

                        <!-- Other Details -->
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="productTags" class="form-label">Tags</label>
                                    <input type="text" class="form-control" id="productTags" name="productTags" placeholder="Comma separated">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="productbrand" class="form-label">Brand</label>
                                    <input type="text" class="form-control" id="productbrand" name="productbrand">
                                </div>
                            </div>

                            <div class="variant-form bg-light p-4 rounded mb-4">
                                <div id="colorSizeSection" class="mb-3">
                                    <label class="form-label fw-bold">Colors and Sizes</label>
                                    <div class="variant-item">
                                        <div class="row mb-3">
                                            <div class="col-md-12">
                                                <input type="text" 
                                                       name="productColors[]" 
                                                       class="form-control color-input" 
                                                       placeholder="Color (e.g., Red)">
                                            </div>
                                        </div>
                                        <div class="size-grid">
                                            <div>
                                                <label class="form-label">S</label>
                                                <input type="number" class="form-control size-input" data-size="S" min="0">
                                            </div>
                                            <div>
                                                <label class="form-label">M</label>
                                                <input type="number" class="form-control size-input" data-size="M" min="0">
                                            </div>
                                            <div>
                                                <label class="form-label">L</label>
                                                <input type="number" class="form-control size-input" data-size="L" min="0">
                                            </div>
                                            <div>
                                                <label class="form-label">X</label>
                                                <input type="number" class="form-control size-input" data-size="X" min="0">
                                            </div>
                                            <div>
                                                <label class="form-label">XL</label>
                                                <input type="number" class="form-control size-input" data-size="XL" min="0">
                                            </div>
                                            <div>
                                                <label class="form-label">XXL</label>
                                                <input type="number" class="form-control size-input" data-size="XXL" min="0">
                                            </div>
                                        </div>
                                        <input type="hidden" name="productSizes[]" class="size-string-input">
                                        <div class="mt-3">
                                            <button type="button" class="btn btn-danger remove-color-size">Remove</button>
                                        </div>
                                    </div>
                                </div>
                                <button type="button" class="btn btn-primary" id="addColorSize">
                                    Add More Color & Sizes
                                </button>
                                <p id="color-size-error" class="text-danger mt-2 small"></p>
                            </div>
                       
                        <div class="form-group">
                            <label for="productCategory" class="form-label">Category</label>
                            <select class="form-control" id="productCategory" name="productCategory">
                                <% categories.forEach(category => { %>
                                    <option value="<%= category._id %>"><%= category.name %></option>
                                <% }) %>
                            </select>
                        </div>

                        <div class="text-center">
                            <button type="submit" class="btn btn-primary btn-submit mt-3 w-50">
                                Add Product
                            </button>
                        </div>
                    </form>
                    
                </div>
            </div>
        </div>
    </div>

  

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://unpkg.com/cropperjs@1.5.12/dist/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>



    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/js/bootstrap.bundle.min.js">
    </script>
    <script>

document.addEventListener('DOMContentLoaded', function () {

    const maxFileSize = 5 * 1024 * 1024; 
    const allowedFormats = ['image/jpeg', 'image/png', 'image/jpg'];
    const maxImages = 4; 
    

    const previewContainers = document.querySelectorAll('.preview-container');
    const cropperModal = new bootstrap.Modal(document.getElementById('cropperModal'));
    const cropperImage = document.getElementById('cropperImage');
    const cropButton = document.getElementById('cropButton');
    let cropper; 
    let currentPreviewContainer = null;

    let croppedImages = {};

    previewContainers.forEach((container, index) => {
  
        const fileInput = container.querySelector(`#fileInput${index + 1}`);
        const previewImage = container.querySelector(`#previewImage${index + 1}`);
        const removeButton = container.querySelector(`#removeImage${index + 1}`);
        const uploadPlaceholder = container.querySelector('.upload-placeholder');
        const errorMessageContainer = container.querySelector('.error-message');


        container.addEventListener('click', (event) => {
            if (event.target !== removeButton) {
                fileInput.click();
            }
        });


        fileInput.addEventListener('change', (event) => {

            errorMessageContainer.textContent = "";
            const file = event.target.files[0];
            if (file) {

                if (!allowedFormats.includes(file.type)) {
                    errorMessageContainer.textContent = 'Only JPG, JPEG, and PNG images are allowed.';
                    fileInput.value = '';
                    return;
                }
          
                if (file.size > maxFileSize) {
                    errorMessageContainer.textContent = 'Image file size must be less than 5 MB.';
                    fileInput.value = '';
                    return;
                }
            
                const reader = new FileReader();
                reader.onload = () => {
                    cropperImage.src = reader.result;
                    currentPreviewContainer = container;
                    cropperModal.show();
                    
                    if (cropper) {
                        cropper.destroy();
                    }
                    cropper = new Cropper(cropperImage, {
                        aspectRatio: 1,
                        viewMode: 1,
                        ready() {
                            this.cropper.crop();
                        }
                    });
                };
                reader.readAsDataURL(file);
            }
        });

        cropButton.addEventListener('click', () => {
            if (cropper && currentPreviewContainer) {
                const canvas = cropper.getCroppedCanvas({
                    width: 800,
                    height: 800,
                    imageSmoothingEnabled: true,
                    imageSmoothingQuality: 'high'
                });
             
                const croppedDataUrl = canvas.toDataURL('image/jpeg', 0.9);
                const currentPreviewImage = currentPreviewContainer.querySelector('.preview-image');
                const currentPlaceholder = currentPreviewContainer.querySelector('.upload-placeholder');

               
                currentPreviewImage.src = croppedDataUrl;
                currentPreviewImage.style.display = 'block';
                currentPlaceholder.style.display = 'none';

              
                const containerIndex = Array.from(previewContainers).indexOf(currentPreviewContainer);
                croppedImages[containerIndex] = croppedDataUrl;

                
                const currentFileInput = currentPreviewContainer.querySelector('input[type="file"]');
                currentFileInput.value = '';

                
                cropperModal.hide();
            }
        });

        
        removeButton.addEventListener('click', (event) => {
            event.stopPropagation();
            previewImage.src = '';
            previewImage.style.display = 'none';
            uploadPlaceholder.style.display = 'flex';
            fileInput.value = '';
            errorMessageContainer.textContent = '';
            const containerIndex = Array.from(previewContainers).indexOf(container);
            delete croppedImages[containerIndex];
        });
    });

    
    const form = document.getElementById('productForm');

form.addEventListener('submit', async (event) => {
    event.preventDefault();
    let isValid = true;

    const invalidInputRegex = /^[.\s]+$/;
    document.getElementById('name-error').textContent = '';
    document.getElementById('price-error').textContent = '';
    document.getElementById('color-size-error').textContent = '';
    document.getElementById('image-error').textContent = '';

 
    const productName = document.getElementById('productName');
    const nameError = document.getElementById('name-error');

    if (!productName.value.trim()||invalidInputRegex.test()) {
        isValid = false;
        nameError.textContent = 'Product Name is required.';
        nameError.style.color = 'red';
    }


    const productPrice = document.getElementById('productPrice');
    const priceError = document.getElementById('price-error');

    if (!productPrice.value.trim() || parseFloat(productPrice.value) <= 0) {
        isValid = false;
        priceError.textContent = 'Product Price must be a positive number.';
        priceError.style.color = 'red';
    }


    const colorSizeInputs = document.querySelectorAll('.color-input, .sizes-input');
    const colorSizeError = document.getElementById('color-size-error');
    let colorSizeValid = true;

    colorSizeInputs.forEach(input => {
        if (!input.value.trim()) {
            colorSizeValid = false;
        }
    });

    if (!colorSizeValid) {
        isValid = false;
        colorSizeError.textContent = 'Color and Size fields must not be empty.';
        colorSizeError.style.color = 'red';
    }

    const previewContainers = document.querySelectorAll('.preview-container');
    const imageError = document.getElementById('image-error');
    let imageValid = true;

    previewContainers.forEach((container, index) => {
        const previewImage = container.querySelector('.preview-image');
        if (!previewImage.src || previewImage.src.trim() === "") {
            imageValid = false;
        }
    });

    if (!imageValid) {
        isValid = false;
        imageError.textContent = 'All images are required.';
        imageError.style.color = 'red';
    }

    if (!isValid) return; 


  
        const formData = new FormData(form);

      
        for (let key of Array.from(formData.keys())) {
            if (key === 'productImages') {
                formData.delete(key);
            }
        }

   
        for (let [index, dataUrl] of Object.entries(croppedImages)) {
            try {
                const blob = await dataURLtoBlob(dataUrl);
                formData.append('productImages', blob, `image${parseInt(index) + 1}.jpg`);
            } catch (error) {
                console.error('Error converting image:', error);
            }
        }

 
        const response = await fetch("/admin/products/add", {
    method: 'POST',
    body: formData
});

if (!response.ok) {
    const errorMessage = `HTTP error! Status: ${response.status}`;
    Swal.fire({
        title: 'Error!',
        text: errorMessage,
        icon: 'error',
    });
    throw new Error(errorMessage);
}

const contentType = response.headers.get('content-type');
if (!contentType || !contentType.includes('application/json')) {
    console.log('Unexpected response format');
} else {
    const data = await response.json();
    Swal.fire({
        title: data.success ? 'Success!' : 'Error!',
        text: data.message || "Something went wrong!",
        icon: data.success ? 'success' : 'error',
    }).then(() => {
        if (data.success) {
            form.reset(); 
        }
    });
}



    });

   
    function dataURLtoBlob(dataUrl) {
        return new Promise((resolve, reject) => {
            try {
                const byteString = atob(dataUrl.split(',')[1]);
                const mimeString = dataUrl.split(',')[0].split(':')[1].split(';')[0];
                const ab = new ArrayBuffer(byteString.length);
                const ia = new Uint8Array(ab);
                for (let i = 0; i < byteString.length; i++) {
                    ia[i] = byteString.charCodeAt(i);
                }
                const blob = new Blob([ab], { type: mimeString });
                resolve(blob);
            } catch (error) {
                reject(error);
            }
        });
    }

   
    function updateSizeString(variantItem) {
            const sizeInputs = variantItem.querySelectorAll('.size-input');
            const sizeStringInput = variantItem.querySelector('.size-string-input');
            
            let sizes = [];
            sizeInputs.forEach(input => {
                if (input.value && parseInt(input.value) > 0) {
                    sizes.push(`${input.dataset.size}:${input.value}`);
                }
            });
            
            sizeStringInput.value = sizes.join(',');
        }

      
        document.getElementById('addColorSize').addEventListener('click', function() {
            const colorSizeSection = document.querySelector('.variant-item');
            const newRow = colorSizeSection.cloneNode(true);
          
            newRow.querySelectorAll('input').forEach(input => {
                input.value = '';
            });

          
            newRow.querySelectorAll('.size-input').forEach(input => {
                input.addEventListener('input', () => updateSizeString(newRow));
            });

       
            newRow.querySelector('.remove-color-size').addEventListener('click', function() {
                if (document.querySelectorAll('.variant-item').length > 1) {
                    newRow.remove();
                }
            });

            document.getElementById('colorSizeSection').appendChild(newRow);
        });

      
        document.querySelectorAll('.variant-item').forEach(variantItem => {
           
            variantItem.querySelectorAll('.size-input').forEach(input => {
                input.addEventListener('input', () => updateSizeString(variantItem));
            });

            
            variantItem.querySelector('.remove-color-size').addEventListener('click', function() {
                if (document.querySelectorAll('.variant-item').length > 1) {
                    variantItem.remove();
                }
            });
        });

    });
        


  
document.addEventListener('DOMContentLoaded', function() {
    const alerts = document.querySelectorAll('.alert');
    
    alerts.forEach(alert => {
       
        if (!alert.textContent.trim()) {
            alert.classList.add('hidden');
        }
    });
});


function showAlert(message, type = 'success') {
    const alert = document.querySelector(`.alert-${type}`);
    alert.textContent = message;
    alert.classList.remove('hidden');
}


function hideAlert(type = 'success') {
    const alert = document.querySelector(`.alert-${type}`);
    alert.classList.add('hidden');

    setTimeout(() => {
        alert.textContent = '';
    }, 300);
}


function autoHideAlerts() {
    const alerts = document.querySelectorAll('.alert:not(.hidden)');
    alerts.forEach(alert => {
        if (alert.textContent.trim()) {
            setTimeout(() => {
                alert.classList.add('hidden');
            }, 5000);
        }
    });
}


document.addEventListener('DOMContentLoaded', autoHideAlerts);
    </script>
</body>
</html>